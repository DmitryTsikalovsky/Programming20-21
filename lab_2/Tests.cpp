//
// Created by al1enware on 29.05.2021.
//

#include "Tests.h"

void testall(){
    cout << "Проверка Linked List" << endl;
    cout << "Проверка конструкторов" << endl;
    int testdata[4]= {1 ,2, 3,4};
    LinkedList<int> testList;
    LinkedList<int> Sublist;
    testList.append(1);
    testList.append(2);
    testList.append(3);
    testList.append(4);
    assert(testList[0] == 1);
    assert(testList[1] == 2);
    assert(testList[2] == 3);
    assert(testList[3] == 4);
    LinkedList<int> testList2(testList);
    assert(testList2[0] == 1);
    assert(testList2[1] == 2);
    assert(testList2[2] == 3);
    assert(testList2[3] == 4);
    LinkedList<int> testList3(testdata, 4);
    assert(testList3[0] == 1);
    assert(testList3[1] == 2);
    assert(testList3[2] == 3);
    assert(testList3[3] == 4);
    cout << "Проверка методов" << endl;
    assert(testList.getSize() == 4);
    testList.set(0,3);
    assert(testList[0] == 3);
    testList.prepend(10);
    assert(testList[0] == 10);
    assert(testList.getFirst() == 10);
    assert(testList.getLast() == 4);
    testList.map(mapint, 2);
    assert(testList[0] == 20);
    assert(testList[1] == 6);
    assert(testList[2] == 4);
    assert(testList[3] == 6);
    assert(testList[4] == 8);
    testList.subSequence(0, 4, &Sublist);
    assert(testList[0] == 20);
    assert(testList[1] == 6);
    assert(testList[2] == 4);
    assert(testList[3] == 6);
    assert(testList[4] == 8);
    testList.where(whereint, 7);
    assert(testList[0] == 20);
    assert(testList[1] == 8);
    testList.deleteOne(0);
    assert(testList[0] == 8);

    cout << "Проверка DynamicArray" << endl;
    cout << "Проверка конструкторов" << endl;
    LinkedList<int> testArray;
    LinkedList<int> Sub;
    testArray.append(1);
    testArray.append(2);
    testArray.append(3);
    testArray.append(4);
    assert(testArray[0] == 1);
    assert(testArray[1] == 2);
    assert(testArray[2] == 3);
    assert(testArray[3] == 4);
    LinkedList<int> testArray2(testArray);
    assert(testArray2[0] == 1);
    assert(testArray2[1] == 2);
    assert(testArray2[2] == 3);
    assert(testArray2[3] == 4);
    LinkedList<int> testArray3(testdata, 4);
    assert(testArray3[0] == 1);
    assert(testArray3[1] == 2);
    assert(testArray3[2] == 3);
    assert(testArray3[3] == 4);
    cout << "Проверка методов" << endl;
    assert(testArray.getSize() == 4);
    testArray.set(0,3);
    assert(testArray[0] == 3);
    testArray.prepend(10);
    assert(testArray[0] == 10);
    assert(testArray.getFirst() == 10);
    assert(testArray.getLast() == 4);
    testArray.map(mapint, 2);
    assert(testArray[0] == 20);
    assert(testArray[1] == 6);
    assert(testArray[2] == 4);
    assert(testArray[3] == 6);
    assert(testArray[4] == 8);
    testArray.subSequence(0, 4, &Sub);
    assert(testArray[0] == 20);
    assert(testArray[1] == 6);
    assert(testArray[2] == 4);
    assert(testArray[3] == 6);
    assert(testArray[4] == 8);
    testArray.where(whereint, 7);
    assert(testArray[0] == 20);
    assert(testArray[1] == 8);
    testArray.deleteOne(0);
    assert(testArray[0] == 8);

    cout << "Проверка Stack c подклассом Linked list" << endl;

    Stack<int, LinkedList<int>> testStack;
    Stack<int, LinkedList<int>> SubStack;
    testStack.append(1);
    testStack.append(2);
    testStack.append(3);
    testStack.append(4);
    assert(testStack[0] == 4);
    assert(testStack[1] == 3);
    assert(testStack[2] == 2);
    assert(testStack[3] == 1);
    cout << "Проверка методов" << endl;
    assert(testStack.getSize() == 4);
    testStack.set(0,3);
    assert(testStack[0] == 3);
    testStack.prepend(10);
    assert(testStack[4] == 10);
    assert(testStack.getFirst() == 3);
    assert(testStack.getLast() == 10);
    testStack.map(mapint, 2);
    assert(testStack[4] == 20);
    assert(testStack[3] == 2);
    assert(testStack[2] == 4);
    assert(testStack[1] == 6);
    assert(testStack[0] == 6);
    testStack.subSequence(0, 4, &SubStack);
    assert(SubStack[0] == 20);
    assert(SubStack[1] == 2);
    assert(SubStack[2] == 4);
    assert(SubStack[3] == 6);
    assert(SubStack[4] == 6);
    testStack.where(whereint, 5);
    assert(testStack[0] == 6);
    assert(testStack[1] == 6);
    assert(testStack[2] == 20);
    testStack.deleteOne(0);
    assert(testStack[0] == 6);
    assert(testStack[1] == 20);

    cout << "Проверка Stack c подклассом Dynamic Array" << endl;
    Stack<int, DynamicArray<int>> testStack2;
    Stack<int, DynamicArray<int>> SubStack2;
    testStack2.append(1);
    testStack2.append(2);
    testStack2.append(3);
    testStack2.append(4);
    assert(testStack2[0] == 4);
    assert(testStack2[1] == 3);
    assert(testStack2[2] == 2);
    assert(testStack2[3] == 1);
    cout << "Проверка методов" << endl;
    assert(testStack2.getSize() == 4);
    testStack2.set(0,3);
    assert(testStack2[0] == 3);
    testStack2.prepend(10);
    assert(testStack2[4] == 10);
    assert(testStack2.getFirst() == 3);
    assert(testStack2.getLast() == 10);
    testStack2.map(mapint, 2);
    assert(testStack2[4] == 20);
    assert(testStack2[3] == 2);
    assert(testStack2[2] == 4);
    assert(testStack2[1] == 6);
    assert(testStack2[0] == 6);
    testStack2.subSequence(0, 4, &SubStack2);
    assert(SubStack2[0] == 20);
    assert(SubStack2[1] == 2);
    assert(SubStack2[2] == 4);
    assert(SubStack2[3] == 6);
    assert(SubStack2[4] == 6);
    testStack2.where(whereint, 5);
    assert(testStack2[0] == 6);
    assert(testStack2[1] == 6);
    assert(testStack2[2] == 20);
    testStack2.deleteOne(0);
    assert(testStack2[0] == 6);
    assert(testStack2[1] == 20);

    cout << "Проверка Queue c подклассом Liked List" << endl;
    Queue<int, LinkedList<int>> Queue1;
    Queue<int, LinkedList<int>> SubQueue;
    Queue1.append(1);
    Queue1.append(2);
    Queue1.append(3);
    Queue1.append(4);
    assert(Queue1[0] == 1);
    assert(Queue1[1] == 2);
    assert(Queue1[2] == 3);
    assert(Queue1[3] == 4);
    cout << "Проверка методов" << endl;
    assert(Queue1.getSize() == 4);
    Queue1.set(0,3);
    assert(Queue1[0] == 3);
    Queue1.prepend(10);
    assert(Queue1[0] == 10);
    assert(Queue1.getFirst() == 10);
    assert(Queue1.getLast() == 4);
    Queue1.map(mapint, 2);
    assert(Queue1[0] == 20);
    assert(Queue1[1] == 6);
    assert(Queue1[2] == 4);
    assert(Queue1[3] == 6);
    assert(Queue1[4] == 8);
    Queue1.subSequence(0, 4, &SubQueue);
    assert(SubQueue[0] == 20);
    assert(SubQueue[1] == 6);
    assert(SubQueue[2] == 4);
    assert(SubQueue[3] == 6);
    assert(SubQueue[4] == 8);
    Queue1.where(whereint, 7);
    assert(Queue1[0] == 20);
    assert(Queue1[1] == 8);
    Queue1.deleteOne(0);
    assert(Queue1[0] == 8);

    cout << "Проверка Queue c подклассом Dynamic Array" << endl;
    Queue<int, DynamicArray<int>> Queue2;
    Queue<int, DynamicArray<int>> SubQueue2;
    Queue2.append(1);
    Queue2.append(2);
    Queue2.append(3);
    Queue2.append(4);
    assert(Queue2[0] == 1);
    assert(Queue2[1] == 2);
    assert(Queue2[2] == 3);
    assert(Queue2[3] == 4);
    cout << "Проверка методов" << endl;
    assert(Queue2.getSize() == 4);
    Queue2.set(0,3);
    assert(Queue2[0] == 3);
    Queue2.prepend(10);
    assert(Queue2[0] == 10);
    assert(Queue2.getFirst() == 10);
    assert(Queue2.getLast() == 4);
    Queue2.map(mapint, 2);
    assert(Queue2[0] == 20);
    assert(Queue2[1] == 6);
    assert(Queue2[2] == 4);
    assert(Queue2[3] == 6);
    assert(Queue2[4] == 8);
    Queue2.subSequence(0, 4, &SubQueue2);
    assert(SubQueue2[0] == 20);
    assert(SubQueue2[1] == 6);
    assert(SubQueue2[2] == 4);
    assert(SubQueue2[3] == 6);
    assert(SubQueue2[4] == 8);
    Queue2.where(whereint, 7);
    assert(Queue2[0] == 20);
    assert(Queue2[1] == 8);
    Queue2.deleteOne(0);
    assert(Queue2[0] == 8);
    cout << "Проверка Завершена" << endl;
}